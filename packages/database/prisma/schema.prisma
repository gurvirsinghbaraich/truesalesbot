// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String      @unique
  password  String
  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  Assistant Assistant[]
}

model Assistant {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  textColor       String    @default("#FFFFFF")
  accentColor     String    @default("#724AE8")
  backgroundColor String    @default("#FFFFFF")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  userId   String     @db.Uuid
  user     User       @relation(fields: [userId], references: [id])
  Domain   Domain[]
  Question Question[]
  Context  Context[]
}

model Domain {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  assistantId String    @db.Uuid
  assistant   Assistant @relation(fields: [assistantId], references: [id])
  signUpId    String    @db.Uuid
  signUp      SignUps   @relation(fields: [signUpId], references: [id])
}

model SignUps {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String
  firstName String?
  lastName  String?
  gender    String?
  city      String?
  zipCode   String?
  region    String?
  country   String?
  provider  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  Domain    Domain[]
}

model Context {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  context     String
  additional  String
  assistantId String    @db.Uuid
  assistant   Assistant @relation(fields: [assistantId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Question {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question    String
  answer      String
  assistantId String    @db.Uuid
  assistant   Assistant @relation(fields: [assistantId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}
